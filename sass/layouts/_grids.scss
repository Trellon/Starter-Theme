/**
 * @file
 * Grids
 * 
 * Container for grids used to abstract some of the settings.
 * 
 * @TODO: Taken from a previous site. There are some styles in here that do not apply globally. Refactor.
 * 
 * @TODO: Use the mixins from this file to replace the ones in responsive. This will allow us to 
 * eventually swap out grids throughout a theme all at once..
 * 
 */
 
/* DEFAULT VARIABLES */ 
$stg-span:          3 !default;
$stg-columns:       12 !default; 
$stg-height:        350px !default; 
$stg-item-selector: '.views-row' !default;
$stg-gutter:        2.25% !default;

/**
 * ST Grids
 * Creates a grid of equally sized items. Apply this to the container for the grid items.
 * 
 * Example:
 * 
 * <div class="view view-articles-view-front">
 *   <div class="view-content">
 *     <div class="views-row views-row-1 views-row-odd views-row-first">
 *       ...
 *     </div>
 *     ...
 *   </div>
 * </div>
 * 
 * Parameters
 *
 * $stg-span: The span of each grid item, measured in columns. Defaults to 3 for a 4 column layout.
 * $stg-columns: The number of columns in the grid. Defaults to 12 for a 4 column layout.
 * $stg-item-selector: Selector for grid items. Defaults to .views-row.
 * $stg-height: Optional. The height of each grid item. Defaults to false.
 * $stg-gutter: Optional. Overrides the default gutters used in Zen. Defaults to 2.25%.
 * $stg-debug: Optional. Shows default variables for the grid. Defaults to false.
 *
 */
@mixin stg-grids(
  $stg-span:          $stg-span,
  $stg-columns:       $stg-columns,
  $stg-item-selector: $stg-item-selector,
  $stg-height:        $stg-height,
  $stg-gutter:        $stg-gutter,
  $stg-debug:         false
){

  @include box-sizing(border-box);
  @include zen-grid-container();
  
  @if ($stg-debug == true) {
    @include zen-grid-background();
  }
  
  #{$stg-item-selector} {
    @include box-sizing(border-box);
    @include zen-flow-item-width(
      $column-span: $stg-span,
      $parent-column-span: $stg-columns,
      $gutters: $stg-gutter
    );
    @include zen-float();
    
    /* For the last item in each row, remove any margins */
    &:nth-child(#{$stg-columns / $stg-span}n+0){
      margin-right: 0px;
    }
    
    /* Set the height, when needed */
    @if($stg-height != false ){
      height: $stg-height;
    }
    
    /* Show debug information when needed */
    @if ($stg-debug == true) {
      direction: $zen-direction;
      columns: $zen-columns;
      gutters: $zen-gutters;
      gutter-method: $zen-gutter-method;
      grid-width: $zen-grid-width;
      box-sizing: $zen-box-sizing;
      switch-direction: $zen-switch-direction;
      include-base: $zen-auto-include-flow-item-base;
    }
  }
} 

